{"version":3,"sources":["Components/TopNavBar.js","img/profile.jpg","Components/ProfileComponent.js","Components/SkillsComponent.js","App.js","reportWebVitals.js","index.js"],"names":["TopNavBar","className","Container","Item","href","ProfileComponent","Card","Image","src","ProfilePicture","wrapped","ui","Content","Header","Meta","Description","SkillsComponent","Segment","inverted","Progress","percent","color","progress","App","clasName","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLAoBeA,MAhBf,WACE,OACE,cAAC,SAAD,CAAQC,UAAU,wBAAlB,SACE,eAAC,SAAOC,UAAR,WACE,cAAC,SAAOC,KAAR,CAAaC,KAAK,IAAlB,kBACA,cAAC,SAAOD,KAAR,CAAaC,KAAK,IAAlB,sBACA,cAAC,SAAOD,KAAR,CAAaC,KAAK,IAAlB,oBACA,cAAC,SAAOD,KAAR,CAAaC,KAAK,IAAlB,sBACA,cAAC,SAAOD,KAAR,CAAaC,KAAK,IAAlB,oBACA,cAAC,SAAOD,KAAR,CAAaC,KAAK,IAAlB,mBACA,cAAC,SAAOD,KAAR,CAAaC,KAAK,IAAlB,2BCdO,MAA0B,oC,2BCyB1BC,EAfU,kBACvB,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAOC,IAAKC,EAAgBC,SAAO,EAACC,IAAI,IACxC,eAACL,EAAA,EAAKM,QAAN,WACE,cAACN,EAAA,EAAKO,OAAN,iCACA,cAACP,EAAA,EAAKQ,KAAN,UACE,sBAAMb,UAAU,OAAhB,4BAEF,cAACK,EAAA,EAAKS,YAAN,gD,kBCHSC,EAZS,kBACtB,eAACC,EAAA,EAAD,CAASC,UAAQ,EAAjB,UACE,cAACC,EAAA,EAAD,CAAUC,QAAS,GAAIF,UAAQ,EAACG,MAAM,OAAOC,UAAQ,IACrD,cAACH,EAAA,EAAD,CAAUC,QAAS,GAAIF,UAAQ,EAACG,MAAM,SAASC,UAAQ,IACvD,cAACH,EAAA,EAAD,CAAUC,QAAS,GAAIF,UAAQ,EAACG,MAAM,SAASC,UAAQ,IACvD,cAACH,EAAA,EAAD,CAAUC,QAAS,GAAIF,UAAQ,EAACG,MAAM,OAAOC,UAAQ,IACrD,cAACH,EAAA,EAAD,CAAUC,QAAS,GAAIF,UAAQ,EAACG,MAAM,QAAQC,UAAQ,IACtD,cAACH,EAAA,EAAD,CAAUC,QAAS,GAAIF,UAAQ,EAACG,MAAM,OAAOC,UAAQ,IACrD,cAACH,EAAA,EAAD,CAAUC,QAAS,GAAIF,UAAQ,EAACG,MAAM,QAAQC,UAAQ,QCoB3CC,MA1Bf,WACE,OACE,qBAAKtB,UAAU,MAAf,SACE,0BAASuB,SAAS,iCAAlB,UACE,qBAAKvB,UAAU,YAAf,SACE,yBAASwB,MAAM,UAAf,SACE,cAAC,EAAD,QAGJ,qBAAKxB,UAAU,YAAf,SACE,yBAASwB,MAAM,UAAf,SACE,0BAASA,MAAM,UAAf,UACE,qBAAKA,MAAM,SAAX,SACE,cAAC,EAAD,MAEF,qBAAKA,MAAM,2BAAX,SACE,cAAC,EAAD,mBCTDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.08401323.chunk.js","sourcesContent":["import React from \"react\";\nimport \"bulma/css/bulma.min.css\";\nimport { Navbar } from \"react-bulma-components\";\n\nfunction TopNavBar() {\n  return (\n    <Navbar className=\"is-black is-fixed-top\">\n      <Navbar.Container>\n        <Navbar.Item href=\"#\">HOME</Navbar.Item>\n        <Navbar.Item href=\"#\">ABOUT ME</Navbar.Item>\n        <Navbar.Item href=\"#\">SKILLS</Navbar.Item>\n        <Navbar.Item href=\"#\">PROJECTS</Navbar.Item>\n        <Navbar.Item href=\"#\">AWARDS</Navbar.Item>\n        <Navbar.Item href=\"#\">BLOGS</Navbar.Item>\n        <Navbar.Item href=\"#\">CONTACT</Navbar.Item>\n      </Navbar.Container>\n    </Navbar>\n  );\n}\n\nexport default TopNavBar;\n","export default __webpack_public_path__ + \"static/media/profile.73703b89.jpg\";","import React from \"react\";\nimport ProfilePicture from \"../img/profile.jpg\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Card, Icon, Image } from 'semantic-ui-react'\n// function ProfileComponent() {\n//   return <Image src={ProfilePicture} size=\"medium\" circular />;\n// }\n\n\n\nconst ProfileComponent = () => (\n  <Card>\n    <Image src={ProfilePicture} wrapped ui={false} />\n    <Card.Content>\n      <Card.Header>Yuvaraj Selvarajan</Card.Header>\n      <Card.Meta>\n        <span className='date'>2019-PRESENT</span>\n      </Card.Meta>\n      <Card.Description>\n        SOFTWARE ENGINEER AT SHELL\n      </Card.Description>\n    </Card.Content>\n  </Card>\n)\n\nexport default ProfileComponent;\n","import React from \"react\";\nimport { Progress, Segment } from \"semantic-ui-react\";\n\nconst SkillsComponent = () => (\n  <Segment inverted>\n    <Progress percent={85} inverted color=\"blue\" progress />\n    <Progress percent={38} inverted color=\"violet\" progress />\n    <Progress percent={47} inverted color=\"purple\" progress />\n    <Progress percent={29} inverted color=\"pink\" progress />\n    <Progress percent={68} inverted color=\"brown\" progress />\n    <Progress percent={36} inverted color=\"grey\" progress />\n    <Progress percent={72} inverted color=\"black\" progress />\n  </Segment>\n);\n\nexport default SkillsComponent;\n","import \"./App.css\";\nimport NavigationBar from \"./Components/TopNavBar\";\nimport Profile from \"./Components/ProfileComponent\";\nimport Skills from \"./Components/SkillsComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <section clasName=\"hero is-fullheight-with-navbar\">\n        <div className=\"hero-head\">\n          <section class=\"section\">\n            <NavigationBar />\n          </section>\n        </div>\n        <div className=\"hero-body\">\n          <section class=\"section\">\n            <section class=\"columns\">\n              <div class=\"column\">\n                <Profile />\n              </div>\n              <div class=\"column is-three-quarters\">\n                <Skills />\n              </div>\n            </section>\n          </section>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}